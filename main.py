from datetime import datetime

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import executor
from handlers import *


# —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –î–† –∏ —Å–æ–±—ã—Ç–∏—è—Ö ###############################################################################
async def send_message_birthdays_events():
    with sq.connect("people.db") as con:
        today = datetime.today()  # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        cur = con.cursor()
        birthdays = {elem[0]: elem[1:] for elem in cur.execute(f"SELECT name, birthdate, name_declension FROM p1").fetchall()}
        events = {elem[0]: elem[1:] for elem in cur.execute(f"SELECT name, date, access FROM p2").fetchall()}

        async def check_birthdays_and_events(dct):
            for key, value in dct.items():
                d, m = map(int, value[0].split(".")[:2])
                dr = datetime(today.year, m, d)
                delta = dr - today
                if delta.days < 0:  # –µ—Å–ª–∏ –î–† —É–∂–µ –ø—Ä–æ—à–µ–ª - –∑–Ω–∞—á–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π - –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º 1 –≥–æ–¥
                    dr = datetime(today.year + 1, m, d)
                    delta = dr - today
                if delta.days <= 2:  # –µ—Å–ª–∏ –¥–æ –î–† –æ—Å—Ç–∞–µ—Ç—Å—è –º–µ–Ω—å—à–µ –¥–≤—É—Ö –¥–Ω–µ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, id
                    # –∫–æ—Ç–æ—Ä—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É id_telegramm –≤ –ë–î
                    if dct == birthdays:
                        for id_t in cur.execute(f"SELECT id_t FROM id_telegramm").fetchall():
                            await bot.send_message(id_t[0], f"<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –î–† üçºüç∫üç∑ü•É</b>\n"
                                                            f"–ß—É–≤—Å—Ç–≤—É—é —è, —á—Ç–æ –±–ª–∏–∑–∏—Ç—Å—è...\n"
                                                            f"–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è {value[1]}\n"
                                                            f"<b>{value[0]}</b>", parse_mode='html')
                    elif dct == events:
                        for id_t in cur.execute(f"SELECT id_t FROM id_telegramm").fetchall():
                            if value[1] == 'all' or id_t[0] in value[1]:
                                await bot.send_message(id_t[0], f"<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏</b>\n"
                                                                f"{key}\n<b>{value[0]}</b>", parse_mode='html')

        await check_birthdays_and_events(birthdays)
        await check_birthdays_and_events(events)


scheduler = AsyncIOScheduler(timezone="Europe/Moscow")  # –∑–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
scheduler.add_job(send_message_birthdays_events, trigger="interval", hours=8)
scheduler.start()



executor.start_polling(dp)






