from aiogram import Bot, Dispatcher, executor, types
import config
import my_parser
import other_func
from string import ascii_letters, digits, printable

# FSM import  ##########################################################################################################
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

# FSM  #################################################################################################################
storage = MemoryStorage()
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot, storage=storage)


# —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è FSM –¥–ª—è –º–æ–¥—É–ª—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π
class Birthday(StatesGroup):
    name_input = State()


@dp.message_handler(state=Birthday.name_input)
async def answer_birthday(message, state: FSMContext):
    async def search_for_name():
        for key in other_func.dict_obj:
            if message.text.lower() in key:
                await bot.send_message(message.chat.id,
                                       f"\n{other_func.dict_obj[key].birthday}\n–≤–æ–∑—Ä–∞—Å—Ç: {other_func.dict_obj[key].get_age()}",
                                       parse_mode='html')
                await state.finish()  # –≤—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω–∏

    if message.text.lower() in other_func.names:
        await search_for_name()
    elif message.text.lower() in ["–≤—Å–µ –¥—Ä"]:
        for elem in sorted(other_func.lst_person, key=lambda x: x.birthday.split(".")[1]):  # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            await bot.send_message(message.chat.id, f"{elem.name}\n{elem.birthday}\n–≤–æ–∑—Ä–∞—Å—Ç: {elem.get_age()}",
                                   parse_mode='html')
            await state.finish()  # –≤—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω–∏
    else:
        await bot.send_message(message.chat.id, f"–£–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –≤—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω–∏...",
                               parse_mode='html')
        await state.finish()  # –≤—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω–∏


# —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è FSM –¥–ª—è –º–æ–¥—É–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
class Translation(StatesGroup):
    text_input = State()


@dp.message_handler(state=Translation.text_input)
async def answer_translation(message, state: FSMContext):
    # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ Ru_En
    if all([True if letter in ascii_letters + digits else False for letter in message.text.lower()]):
        await bot.send_message(message.chat.id,
                               f"https://translate.google.com/?hl=ru&tab=TT&sl=en&tl=ru&text={message.text}&op=translate",
                               parse_mode='html')
        await state.finish()  # –≤—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω–∏
    # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ En_Ru
    elif all([True if letter in "–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è" + digits else False for letter in
              message.text.lower()]):
        await bot.send_message(message.chat.id,
                               f"https://translate.google.com/?hl=en&tab=TT&sl=ru&tl=en&text={message.text}&op=translate",
                               parse_mode='html')
        await state.finish()  # –≤—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω–∏
    else:
        await bot.send_message(message.chat.id,
                               f"–í–≤–µ–¥–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.\n–î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ rus –∏–ª–∏ eng –±—É–∫–≤—ã, –∞ —Ç–∞–∫–∂–µ —Ü–∏—Ñ—Ä—ã.\n–í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω–∏...",
                               parse_mode='html')
        await state.finish()


# —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è FSM –¥–ª—è –º–æ–¥—É–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
class Calculator(StatesGroup):
    nums_input = State()


@dp.message_handler(state=Calculator.nums_input)
async def answer_calculator(message, state: FSMContext):
    try:
        operator = "".join([elem for elem in message.text if elem in ["+", "-", "*", "/", "%"]])
        working_line = message.text.replace(",", ".").split(operator)
        num1, num2 = map(lambda num: int(num.strip()) if "." not in num else float(num.strip()), working_line)
        if operator == "+":
            await bot.send_message(message.chat.id, f"{num1 + num2}\n\n<b>–í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞...</b>", parse_mode='html')
        elif operator == "-":
            await bot.send_message(message.chat.id, f"{num1 - num2}\n\n<b>–í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞...</b>", parse_mode='html')
        elif operator == "*":
            await bot.send_message(message.chat.id, f"{num1 * num2}\n\n<b>–í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞...</b>", parse_mode='html')
        elif operator == "/":
            await bot.send_message(message.chat.id, f"{num1 / num2}\n\n<b>–í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞...</b>", parse_mode='html')
        elif operator == "**":
            await bot.send_message(message.chat.id, f"{num1 ** num2}\n\n<b>–í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞...</b>", parse_mode='html')
        elif operator == "//":
            await bot.send_message(message.chat.id, f"{num1 // num2}\n\n<b>–í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞...</b>", parse_mode='html')
        elif operator == "%":
            await bot.send_message(message.chat.id, f"{num1 % num2}\n\n<b>–í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞...</b>", parse_mode='html')
    except ValueError:
        await bot.send_message(message.chat.id, f'''<b>–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π...</b>
        
–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
5 + 5 (—Å–ª–æ–∂–µ–Ω–∏–µ)
5,6 - 4,6 (–≤—ã—á–∏—Ç–∞–Ω–∏–µ)
5,5 * 5 (—É–º–Ω–æ–∂–µ–Ω–∏–µ)
10.5 / 5.5 (–¥–µ–ª–µ–Ω–∏–µ)
2 ** 3 (–≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å)
9 ** 0.5 (–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å)
10 // 3 (—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ)
10 % 3 (–æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è)

<b>–í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞...</b>''', parse_mode='html')
    await state.finish()


# –û–°–ù–û–í–ù–û–ô –ö–û–î  ########################################################################################################
@dp.message_handler(commands=["start"])
async def start(message):
    mess = f'''–ü—Ä–∏–≤–µ—Ç <b>{message.from_user.first_name}</b>, –≤–∞—à id: {message.chat.id}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"—Ñ–∏–Ω–∞–Ω—Å—ã"\n"–ø–æ–≥–æ–¥–∞"\n"–ø–µ—Ä–µ–≤–æ–¥\n"–î–†".\n
–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ - –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª.'''
    #  —Å–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardMarkup()
    r_btn1 = types.KeyboardButton("üíµ–§–∏–Ω–∞–Ω—Å—ã")
    r_btn2 = types.KeyboardButton("‚õÖ–ü–æ–≥–æ–¥–∞")
    r_btn3 = types.KeyboardButton("üá¨üáß–ü–µ—Ä–µ–≤–æ–¥")
    r_btn4 = types.KeyboardButton("üéÅ–î–†")
    r_btn5 = types.KeyboardButton("üßÆ–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
    markup.add(r_btn1, r_btn2, r_btn3, r_btn4, r_btn5)  # –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    await bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)


@dp.message_handler(content_types=["text"])
async def callback_1(message):
    # –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if message.chat.type == "private":  # –¥–∞–ª—å–Ω–µ–π—à–∏–π –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ —á–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
        if message.text.lower() in ["id", "—É–∑–Ω–∞—Ç—å id", "–º–æ–π id"]:
            await bot.send_message(message.chat.id, f"—Ç–≤–æ–π id: {message.chat.id}", parse_mode='html')
        elif message.text.lower() == "–ø—Ä–∏–≤–µ—Ç":
            await bot.send_message(message.chat.id, f'''–ò –≤–∞–º –ø—Ä–∏–≤–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:
\n"—Ñ–∏–Ω–∞–Ω—Å—ã"\n"–ø–æ–≥–æ–¥–∞"\n"–ø–µ—Ä–µ–≤–æ–¥\n"–î–†".
\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ - –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª.
–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã - –≤–≤–µ–¥–∏—Ç–µ: /start''', parse_mode='html')
        elif message.text.lower() in ["üíµ—Ñ–∏–Ω–∞–Ω—Å—ã", "—Ñ–∏–Ω–∞–Ω—Å—ã", "/—Ñ–∏–Ω–∞–Ω—Å—ã"]:
            await bot.send_message(message.chat.id, f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –æ–∂–∏–¥–∞–π—Ç–µ...", parse_mode='html')
            await bot.send_message(message.chat.id, f"""$ <b>{my_parser.Parser.content_usd_rub()}</b>
‚Ç¨ <b>{my_parser.Parser.content_eur_rub()}</b>
–ù–µ—Ñ—Ç—å Brent: <b>{my_parser.Parser.content_oil_brent()}</b>
–ò–Ω–¥–µ–∫—Å S&P 500: <b>{my_parser.Parser.content_spx()}</b>
–ò–Ω–¥–µ–∫—Å –ú–æ—Å–±–∏—Ä–∂–∏: <b>{my_parser.Parser.content_imoex()}</b>
\n–ò—Å—Ç–æ—á–Ω–∏–∫: https://ru.investing.com""", parse_mode='html')
        elif message.text.lower() in ["‚õÖ–ø–æ–≥–æ–¥–∞", "–ø–æ–≥–æ–¥–∞", "/–ø–æ–≥–æ–¥–∞", "–ø–æ–≥–æ–¥–∞ –∫—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ø–æ–≥–æ–¥–∞ –≤ –∫—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ"]:
            await bot.send_message(message.chat.id, f"""–ü–æ–≥–æ–¥–∞ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ: {my_parser.Parser.content_weather()}\n
–ò—Å—Ç–æ—á–Ω–∏–∫: https://www.gismeteo.ru/weather-krasnodar-5136/now""", parse_mode='html')
        elif message.text.lower() in ["üá¨üáß–ø–µ—Ä–µ–≤–æ–¥", "–ø–µ—Ä–µ–≤–æ–¥"]:
            await bot.send_message(message.chat.id, f"–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞ - –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ:",
                                   parse_mode='html')
            await Translation.text_input.set()  # –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞

        # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —Å –î–†
        elif message.text.lower() in ["üéÅ–¥—Ä", "–¥—Ä", "/–¥—Ä"]:
            await bot.send_message(message.chat.id,
                                   f'–î–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è - –≤–≤–µ–¥–∏—Ç–µ –∏–º—è:\n\n–î–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞ - –≤–≤–µ–¥–∏—Ç–µ: "–≤—Å–µ –î–†."',
                                   parse_mode='html')
            await Birthday.name_input.set()  # –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏–º–µ–Ω–Ω–∏–Ω–∏–∫–∞

        elif message.text.lower() in other_func.names:
            await bot.send_message(message.chat.id,
                                   f'–î–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è - –≤–≤–µ–¥–∏—Ç–µ "–î–†" –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–æ–π.\n\n–î–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞ - –≤–≤–µ–¥–∏—Ç–µ: "–≤—Å–µ –î–†".',
                                   parse_mode='html')

        elif message.text.lower() == "–≤—Å–µ –¥—Ä":
            for elem in sorted(other_func.lst_person, key=lambda x: x.birthday.split(".")[1]):  # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                await bot.send_message(message.chat.id, f"{elem.name}\n{elem.birthday}\n–≤–æ–∑—Ä–∞—Å—Ç: {elem.get_age()}",
                                       parse_mode='html')

        # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º
        elif message.text.lower() in ["üßÆ–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"]:
            await bot.send_message(message.chat.id, f'''<b>–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞...</b>
            
–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è –ø—Ä–æ–±–µ–ª—ã, –∞ —Ç–∞–∫–∂–µ "." –∏–ª–∏ "," –¥–ª—è –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–µ–ª.

–ü—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
5 + 5 (—Å–ª–æ–∂–µ–Ω–∏–µ)
5,6 - 4,6 (–≤—ã—á–∏—Ç–∞–Ω–∏–µ)
5,5 * 5 (—É–º–Ω–æ–∂–µ–Ω–∏–µ)
10.5 / 5.5 (–¥–µ–ª–µ–Ω–∏–µ)
2 ** 3 (–≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å)
9 ** 0.5 (–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å)
10 // 3 (—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ)
10 % 3 (–æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è)''', parse_mode='html')
            await Calculator.nums_input.set()  # –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ü–∏—Ñ—Ä –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞

        # c–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –≤–≤–µ–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        else:
            markup = types.InlineKeyboardMarkup(row_width=3)
            btn1 = types.InlineKeyboardButton("üíµ–§–∏–Ω–∞–Ω—Å—ã", callback_data="q1")
            btn2 = types.InlineKeyboardButton("‚õÖ–ü–æ–≥–æ–¥–∞", callback_data="q2")
            btn3 = types.InlineKeyboardButton("üá¨üáß–ü–µ—Ä–µ–≤–æ–¥", callback_data="q3")
            btn4 = types.InlineKeyboardButton("üéÅ–î–†", callback_data="q4")
            btn5 = types.KeyboardButton("üßÆ–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="q5")
            markup.add(btn1, btn2, btn3, btn4, btn5)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            await bot.send_message(message.chat.id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É:",
                                   reply_markup=markup)


# –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.callback_query_handler(text_startswith="q")
async def callback_2(call: types.callback_query):
    if call.data == "q1":
        await bot.send_message(call.message.chat.id, f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –æ–∂–∏–¥–∞–π—Ç–µ...", parse_mode='html')
        await bot.send_message(call.message.chat.id, f"""$ <b>{my_parser.Parser.content_usd_rub()}</b>
‚Ç¨ <b>{my_parser.Parser.content_eur_rub()}</b>
–ù–µ—Ñ—Ç—å Brent: <b>{my_parser.Parser.content_oil_brent()}</b>
–ò–Ω–¥–µ–∫—Å S&P 500: <b>{my_parser.Parser.content_spx()}</b>
–ò–Ω–¥–µ–∫—Å –ú–æ—Å–±–∏—Ä–∂–∏: <b>{my_parser.Parser.content_imoex()}</b>
\n–ò—Å—Ç–æ—á–Ω–∏–∫: https://ru.investing.com""", parse_mode='html')
    elif call.data == "q2":
        await bot.send_message(call.message.chat.id, f"""–ü–æ–≥–æ–¥–∞ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ: {my_parser.Parser.content_weather()}\n
–ò—Å—Ç–æ—á–Ω–∏–∫: https://www.gismeteo.ru/weather-krasnodar-5136/now""", parse_mode='html')
    elif call.data == "q3":
        await bot.send_message(call.message.chat.id, f"–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞ - –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ:",
                               parse_mode='html')
        await Translation.text_input.set()  # –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    elif call.data == "q4":
        await bot.send_message(call.message.chat.id,
                               f'–î–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è - –≤–≤–µ–¥–∏—Ç–µ –∏–º—è:\n\n–î–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞ - –≤–≤–µ–¥–∏—Ç–µ: "–≤—Å–µ –î–†."',
                               parse_mode='html')
        await Birthday.name_input.set()
    elif call.data == "q5":
        await bot.send_message(call.message.chat.id, f'''<b>–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞...</b>
 
–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è –ø—Ä–æ–±–µ–ª—ã, –∞ —Ç–∞–∫–∂–µ "." –∏–ª–∏ "," –¥–ª—è –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–µ–ª.

–ü—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
5 + 5 (—Å–ª–æ–∂–µ–Ω–∏–µ)
5,6 - 4,6 (–≤—ã—á–∏—Ç–∞–Ω–∏–µ)
5,5 * 5 (—É–º–Ω–æ–∂–µ–Ω–∏–µ)
10.5 / 5.5 (–¥–µ–ª–µ–Ω–∏–µ)
2 ** 3 (–≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å)
9 ** 0.5 (–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å)
10 // 3 (—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ)
10 % 3 (–æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è)''', parse_mode='html')
        await Calculator.nums_input.set()  # –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ü–∏—Ñ—Ä –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞


executor.start_polling(dp)
